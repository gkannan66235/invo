PYTHON ?= python
PIP ?= pip
SRC_DIR := src

# Default target
.DEFAULT_GOAL := help

## help: Show this help message
help:
	@grep -E '^##' Makefile | sed -e 's/## //'

## install: Install production + development dependencies
install:
	$(PIP) install -r requirements.txt -r requirements-dev.txt

## format: Auto-format code (isort, black)
format:
	isort $(SRC_DIR) tests
	black $(SRC_DIR) tests

## lint: Run static analysis (flake8, isort --check, black --check, mypy)
lint:
	flake8 $(SRC_DIR) tests
	isort --check-only $(SRC_DIR) tests
	black --check $(SRC_DIR) tests
	mypy $(SRC_DIR)

## test: Run test suite with coverage (global >=80%, invoices router >=90%)
test:
	pytest
	# Enforce 90% coverage on invoices router (T004)
	coverage report --fail-under=90 $(SRC_DIR)/routers/invoices.py

## test-fast: Run tests in fast mode (skips OTEL setup, seeds, real auth hash) - set FAST_TESTS=1
test-fast:
	FAST_TESTS=1 pytest tests/unit -q -k "" --no-cov --disable-warnings

## test-postgres: Run tests against Postgres (requires TEST_DB_URL env var)
test-postgres:
	@if [ -z "$$TEST_DB_URL" ]; then echo "TEST_DB_URL not set (e.g., export TEST_DB_URL=postgresql+asyncpg://user:pass@localhost:5432/invo_test)"; exit 1; fi
	TESTING=true pytest -q

## testdb-create: Create Postgres test database (requires NAME and optional TEST_DB_SUPER_URL)
testdb-create:
	@if [ -z "$(NAME)" ]; then echo "Provide NAME=your_test_db"; exit 1; fi
	$(PYTHON) -m tests._tools.manage_test_db create $(NAME)

## testdb-drop: Drop Postgres test database (requires NAME)
testdb-drop:
	@if [ -z "$(NAME)" ]; then echo "Provide NAME=your_test_db"; exit 1; fi
	$(PYTHON) -m tests._tools.manage_test_db drop $(NAME)

## perf: Run only performance tests
perf:
	pytest -m performance -k invoice -q

## migrate: Apply all Alembic migrations to head
migrate:
	DB_URL?=$(DATABASE_URL)
	alembic upgrade head

## revision: Create a new autogenerated Alembic revision with message MSG="..."
revision:
	@if [ -z "$(MSG)" ]; then echo "Provide MSG=your_message"; exit 1; fi
	alembic revision -m "$(MSG)" --autogenerate

## stamp: Stamp database with current head without running migrations (use carefully)
stamp:
	alembic stamp head

## clean: Remove build, cache, coverage artifacts
clean:
	rm -rf .pytest_cache .mypy_cache htmlcov .coverage

## cov-html: Open HTML coverage report (generate if missing)
cov-html:
	[ -f htmlcov/index.html ] || pytest >/dev/null 2>&1 || true
	@echo "Open htmlcov/index.html in your browser"

.PHONY: help install format lint test perf migrate revision stamp clean cov-html
