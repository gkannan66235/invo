version: '3.8'

services:
  # PostgreSQL Database
  database:
    build: 
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: gst_service_center
      POSTGRES_USER: gst_user
      POSTGRES_PASSWORD: gst_password_2023
      POSTGRES_TIMEZONE: Asia/Kolkata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
    networks:
      - gst_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gst_user -d gst_service_center"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Use synchronous driver for primary SQLAlchemy engine; async URL is derived automatically
      DATABASE_URL: postgresql+psycopg://gst_user:gst_password_2023@database:5432/gst_service_center
      SECRET_KEY: your-secret-key-change-in-production
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
      # Seed an initial admin user (entrypoint script will create if missing)
      SEED_ADMIN_USERNAME: admin
      SEED_ADMIN_EMAIL: admin@example.com
      SEED_ADMIN_PASSWORD: admin123
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    networks:
      - gst_network
    # Entrypoint script in Dockerfile handles migrations then starts uvicorn
    command: ./scripts/entrypoint.sh

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - gst_network

  # Redis for caching and session management (for offline sync)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gst_network
    command: redis-server --appendonly yes

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - gst_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  gst_network:
    driver: bridge